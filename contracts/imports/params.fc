int workchain() asm "0 PUSHINT";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

cell calculate_jetton_wallet_state_init(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) {
  return begin_cell()
    .store_uint(0, 2)
    .store_dict(jetton_wallet_code)
    .store_dict(begin_cell()
      .store_slice(owner_address)
      .store_slice(jetton_master_address)
    .end_cell())
  .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) {
  return begin_cell()
    .store_uint(4, 3)
    .store_int(workchain(), 8)
    .store_uint(cell_hash(state_init), 256)
  .end_cell()
  .begin_parse();
}

slice calculate_user_jetton_wallet_address(slice owner_address, slice jetton_master_address, cell jetton_wallet_code) {
  return calculate_jetton_wallet_address(calculate_jetton_wallet_state_init(owner_address, jetton_master_address, jetton_wallet_code));
}